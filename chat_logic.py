import random
from flask import current_app
from openai import OpenAI
import os, random

# === 감정 + 일상 대화 통합 카테고리 ===
daily_categories = {
    "무맥락 애매한 것들": [
        "에바야", "애매하긴 해", "가면 가", "하면 해", "GMG", "HMH", "ㄱㄱ", "가보자고",
        "어쩌겠어", "해야지 뭐", "아 하기 싫음", "아니 근데 진짜", "ㄹㅇ..?", "ㄹㅇ",
        "진심 개에바야ㅠ", "진심", "헐", "대박", "겁나", "개 ~", "ㅈㄴ", "ㄱㅇㅇ", "ㄱㅇㄱ",
        "ㅁㅊ", "미쳤다", "아니 미친거 아님?", "와", "이건 좀", "뭔말알?", "뭔느알?", "미쳤네",
        "엥?", "ㅇㅇ", "ㅇㅋㅇㅋ", "ㅇㅋ", "지렸다", "오졌네", "감다살", "감다뒤", "개맛도리",
        "맛도리", "헉", "헉스베리", "sexy food.", "~인 듯", "미치겠네", "돌겠네", "하.",
        ".", "MBTI", "흠", "음", "그니까", "ㄱㄴㄲ", "잉", "ㅠㅠ", "^_^", "ㄴㄷ", "ㅇㄴ",
        "힘들어", "어려워", "싫어", "좋아", "쉬워", "~ 수 있어", "~ 것 같아", "솔직히", "정말",
        "진짜", "완전", "웃기다", "우와", "대단하다", "대단해", "애착", "~싶어", "~듯 해", "그러니까"
    ],
    "인사/자기소개": [
        "안녕", "안녕하세요", "하이", "헬로", "반가워", "잘 지냈어",
        "누구", "정체", "챗봇", "너 뭐야", "이름", "소개", "자기소개"
    ],
    "감사/칭찬": [
        "고마워", "감사", "덕분", "땡큐", "사랑해", "좋아해",
        "대단해", "멋지다", "굿", "잘했어", "최고", "대박"
    ],
    "놀람/감탄": [
        "헐", "세상에", "진짜?", "우와", "대박", "놀라워", "미쳤다", "소름", "헉"
    ],
    "욕설/부정": [
        "짜증", "화나", "열받", "빡쳐", "좆", "씨발", "젠장", "미워", "싫어",
        "우울", "힘들", "불안", "걱정", "지쳤"
    ],
    "밥/음식": [
        "밥", "식사", "음식", "라면", "치킨", "피자", "야식", "과자", "떡볶이", "초밥"
    ],
    "음료/디저트": [
        "커피", "차", "음료", "버블티", "콜라", "사이다", "디저트", "아이스크림", "빙수"
    ],
    "날씨/계절": [
        "날씨", "비", "눈", "더워", "춥", "계절", "가을", "여름", "겨울", "봄"
    ],
    "공부/학교": [
        "공부", "학교", "시험", "성적", "과제", "강의", "수업", "교수님", "졸업", "대학교"
    ],
    "관계/친구": [
        "친구", "가족", "부모", "형제", "자매", "연애", "연인", "썸", "사람", "관계"
    ]
}

daily_responses = {
    "무맥락 애매한 것들": ["음… 잘 모르겠어.", "그럴 수도 있지.", "ㅎㅎㅎ 알겠어.", "그건 진짜 사람마다 다르더라."],
    "인사/자기소개": [
        "안녕! 만나서 반가워 😀", "하이~ 오늘 기분 어때?", "안녕하세요! 저는 끼리예요 🤖", "나? 네 얘기 들어주는 AI야!"
    ],
    "감사/칭찬": [
        "나도 고마워 🙏", "그렇게 말해주니까 기분 좋다 😀", "칭찬 고마워 ㅎㅎ", "너 진짜 착하네!"
    ],
    "놀람/감탄": [
        "헐 대박…", "진짜? ㄹㅇ?", "와… 그건 신기하다!", "소름돋아 😲", "우와~ 멋지다!"
    ],
    "욕설/부정": [
        "많이 화난 것 같아 😢", "그럴 때도 있지…", "속상했겠다.", "괜찮아, 천천히 얘기해."
    ],
    "밥/음식": [
        "오늘 뭐 먹었어?", "밥은 먹었어?", "요즘 자주 먹는 음식 있어?", "야식 자주 먹어?", "라면 좋아해?", "치킨은 언제 먹어도 옳지 🐔"
    ],
    "음료/디저트": [
        "커피 자주 마셔?", "단 거 좋아해? 🍫", "버블티 좋아해?", "요즘 무슨 음료 좋아해?"
    ],
    "날씨/계절": [
        "오늘 날씨 어땠어?", "비 오는 날 기분 달라져?", "눈 오는 거 좋아해?", "요즘 좀 쌀쌀하지 않아?"
    ],
    "공부/학교": [
        "공부하느라 힘들지?", "시험 기간이라 바쁘겠네.", "요즘 수업 재밌어?", "성적은 괜찮아?"
    ],
    "관계/친구": [
        "최근에 친구들이랑 있었던 일 중 기억에 남는 게 있어?", "가족들이랑 지낼 때 편안했어?", "요즘 외롭진 않아?"
    ]
}

emotion_categories = {
    "기분": ["기분", "감정", "우울", "불안", "짜증", "행복", "화", "무기력", "걱정"],
    "수면": ["잠", "피곤", "불면", "악몽"],
    "식사": ["밥", "식사", "입맛", "음식", "야식"],
    "집중": ["집중", "공부", "주의", "멍"],
    "신체": ["몸", "통증", "두통", "어깨", "건강"],
    "관계": ["친구", "가족", "사람", "연애", "사람들"]
}

emotion_responses = {
    "기분": [
        "요즘 하루하루를 보낼 때 가장 많이 느끼는 감정은 뭐야?",
        "최근에 웃었던 순간이나 즐거웠던 경험이 있었어?",
        "요즘 자주 떠오르는 생각이나 감정이 있다면 어떤 거야?"
    ],
    "수면": [
        "요즘 잠은 잘 자?", "밤에 잠들기 어려울 때 뭐해?", "숙면하면 기분이 달라지지?"
    ],
    "식사": [
        "밥 먹는 게 요즘은 어때?", "식사 패턴이 달라진 걸 느낀 적 있어?", "요즘 자주 먹게 되는 음식 있어?"
    ],
    "집중": [
        "집중이 잘 안 될 때는 보통 어떤 생각이 많을까?", "공부할 때 집중 안 되면 어떻게 해?", "집중 잘 되는 환경이 있을까?"
    ],
    "신체": [
        "몸이 자주 불편하다고 느껴?", "피곤할 때 하루가 어떻게 달라져?", "신체적인 불편함이 감정에도 영향을 주는 것 같아?"
    ],
    "관계": [
        "최근에 친구나 가족이랑 있었던 일 중 기억에 남는 게 있어?",
        "사람들과 어울릴 때 주로 어떤 기분이 들어?",
        "주변 사람들에게 쉽게 말 못하는 고민이 있니?"
    ]
}

default_responses = ["음… 잘 모르겠어.", "그렇구나~ 좀 더 얘기해줄래?", "흥미롭네.", "재밌는 얘기야!"]

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# === 핵심 함수 ===
def classify_and_respond(user_input, user_id=None):
    """
    사용자 입력을 기반으로 카테고리를 분류하고,
    규칙형 응답이 없을 경우 AI(GPT)에게 넘긴다.
    """
    text = user_input.strip()

    # 🧩 1️⃣ 감정 관련 응답 (기존 로직 그대로)
    for category, keywords in emotion_categories.items():
        if any(kw in text for kw in keywords):
            return random.choice(emotion_responses.get(category, default_responses))

    # 🧩 2️⃣ 일상 관련 응답 (기존 로직 그대로)
    for category, keywords in daily_categories.items():
        if any(kw in text for kw in keywords):
            return random.choice(daily_responses.get(category, default_responses))

    # 🧠 3️⃣ 위의 두 경우에 해당하지 않으면 → GPT 호출
    try:
        completion = client.chat.completions.create(
            model="gpt-4o-mini",  # 빠르고 저렴한 모델
            messages=[
                {"role": "system", "content": (
                    "너는 '끼리'라는 이름의 다정하고 공감 잘하는 AI야. "
                    "대화는 자연스럽고 따뜻하게 이어가. "
                    "사용자의 감정을 이해하고, 간결하지만 따뜻한 말투로 답해줘."
                )},
                {"role": "user", "content": text}
            ]
        )
        ai_reply = completion.choices[0].message.content.strip()
        return ai_reply

    except Exception as e:
        # GPT 호출 실패 시 기본 랜덤 응답
        return f"⚠️ AI 응답 오류: {str(e)}"
